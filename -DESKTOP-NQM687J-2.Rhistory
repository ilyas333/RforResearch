desc1.t=t(desc1)
#use kableExtra package to convert it to a table in different formats
library(kableExtra)
kable(desc1.t,format="markdown",booktabs=T,caption="Descriptive Statistics") %>% kable_styling(bootstrap_options = "condensed")
library(psych)#load the required package
args(describe)#arguments for describe function
#use describe to calculate descriptive stats for data_cs1.1r
desc1=describe(data_stocks_ret[,2:11])#note we dont pass the date column
#check the output
head(desc1)
#the above output is in long format, we can transpose it get column format
desc1.t=t(desc1)
#use kableExtra package to convert it to a table in different formats
library(kableExtra)
kable(desc1.t,format="markdown",booktabs=T,caption="Descriptive Statistics") %>% kable_styling(bootstrap_options = "responsive")
options(scipen=1000000)
bookdown::render_book("index.Rmd","bookdown::gitbook")
options()
options()$browser
op1=options()
op1$browser()
options(browser=""C:/Program Files/Mozilla Firefox/firefox.exe"")
options(browser="C:/Program Files/Mozilla Firefox/firefox.exe")
bookdown::render_book("index.Rmd","bookdown::gitbook")
#Generate two random normal vectors
x=rnorm(100)
y=rnorm(100)
#plot x and y using the plot() function
plot(x,y)
args(plot.default)
#Generate two random normal vectors
x=rnorm(100)
y=rnorm(100)
#plot x and y using the plot() function
plot(x,y)
#change the working directory to the folder containing data_fin.csv or provide the full path with the filename
load("data/data_fin.RData")
#change the working directory to the folder containing data_fin.csv or provide the full path with the filename
load("data\data_fin.RData")
#change the working directory to the folder containing data_fin.csv or provide the full path with the filename
load("data/data_fin.RData")
#column names
colnames(FinData)
#plot a line plot for Dow Jones stock index prices
plot(FinData$MSFT,type="l",main="Microsoft Prices",ylab="Prices")#figure-3
library(zoo)
#convert data to class zoo
FinData.ts=zoo(FinData[,2:5],order.by=FinData$Date)
args(plot.default)
plot(x,y,main="Figure-2",xlab="Normal X", ylab="Normal Y")
#Generate two random normal vectors
x=rnorm(100)
y=rnorm(100)
#plot x and y using the plot() function
plot(x,y)
args(plot.default)
plot(x,y,main="Figure-2",xlab="Normal X", ylab="Normal Y")
#change the working directory to the folder containing data_fin.csv or provide the full path with the filename
load("data/data_fin.RData")
#column names
colnames(FinData)
#plot a line plot for Dow Jones stock index prices
plot(FinData$MSFT,type="l",main="Microsoft Prices",ylab="Prices")
library(zoo)
#convert data to class zoo
FinData.ts=zoo(FinData[,2:5],order.by=FinData$Date)
#plot multiple stacked plot
plot(FinData.ts,col=gray.colors(4))#figure-4
load("GDP_Yearly.RData")
load("data/GDP_Yearly.RData")
par1=par()
par(ask=F)
barplot(height=GDP$Australia,names.arg=GDP$Year,
ylab="GDP Per Capita")#figure-5
#figure-7
pie(x=data[1,],labels=colnames(data))
#convert data to matrix
data=as.matrix(GDP[,2:12])
#create row names
rownames(data)=GDP$Year
#plot a stacked bar plot with legend showing the years (figure-6)
barplot(height=data[1:5,],beside=FALSE,col=rainbow(5),legend=rownames(data[1:5,]),args.legend=list(x="top",horiz=TRUE,inset=-0.1),cex.names=0.6)
par(par1)
#figure-7
pie(x=data[1,],labels=colnames(data))
knitr::include_graphics("figure-6_15.png")
#first save the default parameters
par.old=par()
#change the margins
par(mar=c(5,4,7,2))
#plot the bargraph
barplot(height=data[1:5,],beside=FALSE,col=rainbow(5),legend=rownames(data[1:5,]),args.legend=list(x="top",horiz=TRUE,inset=-0.1),cex.names=0.6)
#first save the default parameters
par.old=par()
#creat a 2X2 grid
par(mfrow=c(2,2))
#scatterplot
plot(x,y,xlab="Normal X", ylab="Normal Y")
knitr::opts_chunk$set(comment = NA,tidy=TRUE,tidy.opts = list(keep.blank.lines=TRUE,width.cutoff=80))
#Generate two random normal vectors
x=rnorm(100)
y=rnorm(100)
#plot x and y using the plot() function
plot(x,y)
args(plot.default)
plot(x,y,main="Figure-2",xlab="Normal X", ylab="Normal Y")
#change the working directory to the folder containing data_fin.csv or provide the full path with the filename
load("data/data_fin.RData")
#column names
colnames(FinData)
#plot a line plot for Dow Jones stock index prices
plot(FinData$MSFT,type="l",main="Microsoft Prices",ylab="Prices")
library(zoo)
#convert data to class zoo
FinData.ts=zoo(FinData[,2:5],order.by=FinData$Date)
#plot multiple stacked plot
plot(FinData.ts,col=gray.colors(4))#figure-4
load("data/GDP_Yearly.RData")
par1=par()
par(ask=F)
barplot(height=GDP$Australia,names.arg=GDP$Year,
ylab="GDP Per Capita")#figure-5
#convert data to matrix
data=as.matrix(GDP[,2:12])
#create row names
rownames(data)=GDP$Year
#plot a stacked bar plot with legend showing the years
barplot(height=data[1:5,],beside=FALSE,col=rainbow(5),legend=rownames(data[1:5,]),args.legend=list(x="top",horiz=TRUE,inset=-0.1),cex.names=0.6)
par(par1)
pie(x=data[1,],labels=colnames(data))
pairs(data[,1:5])
pairs(~Australia+UK+USA,data=data)
knitr::include_graphics("figure-6_15.png")
#first save the default parameters
par.old=par()
#creat a 2X2 grid
par(mfrow=c(2,2))
#scatterplot
plot(x,y,xlab="Normal X", ylab="Normal Y")
#time series plot
plot(FinData.ts[,1])
#bar plot
barplot(height=GDP$Australia, names.arg=GDP$Year,ylab="GDP Per Capita (Australia)")
#pie chart
pie(x=data[1:11,1],labels=rownames(data[1:11,]))
#set parameters to default
par(par.old)
bookdown::render_book("index.Rmd","bookdown::gitbook")
bookdown::render_book("index.Rmd","bookdown::gitbook")
install.packages("papaja")
devtools::install_github("crsh/papaja@devel"
)
bookdown::render_book("index.Rmd","bookdown::gitbook")
bookdown::render_book("index.Rmd","bookdown::gitbook")
bookdown::render_book("index.Rmd","bookdown::gitbook")
help(bookdown::render_book)
library(bookdown)
help("render_book")
bookdown::render_book("index.Rmd","bookdown::gitbook",encoding="ISO-8859-1")
bookdown::render_book("index.Rmd","bookdown::gitbook",encoding="ISO-8859-1")
bookdown::render_book("index.Rmd","bookdown::gitbook")
bookdown::render_book("index.Rmd","bookdown::gitbook")
install.packages("posterdown",dependencies=TRUE)
x=rnorm(100)
y=rnorm(100)
#load the library
library(ggplot2)
#simple scatterplot using qplot (figure-12)
qplot(x,y)
load("data/data_fin.RData")
#line plot using qplot (figure-13)
qplot(x=FinData$Date,y=FinData$DJI,geom="line",xlab="Dates",ylab="Prices",main="DJIA Price Timeseries")
help("read.csv")
library(data.table)
help(fread)
#Read "long" format data
load("data/GDP_l.RData")
#data snapshot
head(GDP_l)
#creating the aesthetics using ggplot
p1=ggplot(GDP_l,aes(Country,GDP,fill=Year))
x=rnorm(100)
y=rnorm(100)
#load the library
library(ggplot2)
#simple scatterplot using qplot (figure-12)
qplot(x,y)
#Read "long" format data
load("data/GDP_l.RData")
#data snapshot
head(GDP_l)
#creating the aesthetics using ggplot
p1=ggplot(GDP_l,aes(Country,GDP,fill=Year))
#figure
p1+geom_bar(stat="identity")
@
#change the aesthetics to show time on X-axis and GDP values on Y-axis
#the colour line fill be according to the country
p2=ggplot(GDP_l,aes(Year,GDP,colour=Country,group=Country))
p2+geom_line()
#change the aesthetics to show time on X-axis and GDP values on Y-axis
#the colour line fill be according to the country
p2=ggplot(GDP_l,aes(Year,GDP,colour=Country,group=Country))
p2+geom_line()
#change the aesthetics to show time on X-axis and GDP values on Y-axis
#the colour line fill be according to the country
p2=ggplot(GDP_l,aes(Year,GDP,colour=Country,group=Country))
p2+geom_line()
#change the aesthetics to show time on X-axis and GDP values on Y-axis
#the colour line fill be according to the country
p2=ggplot(GDP_l,aes(Year,GDP,colour=Country,group=Country))
p2+geom_line()
#change the aesthetics to show time on X-axis and GDP values on Y-axis
#the colour line fill be according to the country
p2=ggplot(GDP_l,aes(Year,GDP,colour=Country,group=Country))
p2+geom_line()
#change the aesthetics to show time on X-axis and GDP values on Y-axis
#the colour line fill be according to the country
p2=ggplot(GDP_l,aes(Year,GDP,colour=Country,group=Country))
p2+geom_line()+facet_grid(Country~.)
#change the aesthetics to show time on X-axis and GDP values on Y-axis
#the colour line fill be according to the country
p2=ggplot(GDP_l,aes(Year,GDP,colour=Country,group=Country))
p2+geom_bar()+facet_grid(Country~.)
#change the aesthetics to show time on X-axis and GDP values on Y-axis
#the colour line fill be according to the country
p2=ggplot(GDP_l,aes(Year,GDP,colour=Country,group=Country))
p2+geom_bar(stat="identity")+facet_grid(Country~.)
#change the aesthetics to show time on X-axis and GDP values on Y-axis
#the colour line fill be according to the country
p2=ggplot(GDP_l,aes(Year,GDP,colour=Country,group=Country))
p2+geom_bar(stat="identity",fill=Country)+facet_grid(Country~.)
#change the aesthetics to show time on X-axis and GDP values on Y-axis
#the colour line fill be according to the country
p2=ggplot(GDP_l,aes(Year,GDP,fill=Country,group=Country))
p2+geom_bar(stat="identity")+facet_grid(Country~.)
#change the aesthetics to show time on X-axis and GDP values on Y-axis
#the colour line fill be according to the country
p2=ggplot(GDP_l,aes(Year,GDP,fill=Country,group=Country))
p2+geom_line(stat="identity")+facet_grid(Country~.)
#change the aesthetics to show time on X-axis and GDP values on Y-axis
#the colour line fill be according to the country
p2=ggplot(GDP_l,aes(Year,GDP,colour=Country,group=Country))
p2+geom_line()+facet_grid(Country~.)
install.packages("postr")
getwd()
setwd("C:/MQ_OC:/MQ_One_Drive/OneDrive - Macquarie University/R_Work/")
setwd("C://MQ_One_Drive/OneDrive - Macquarie University/R_Work/")
getwd()
setwd("C://MQ_One_Drive/OneDrive - Macquarie University/R_Work/postr/")
postr::postr()
devtools::install_github("odeleongt/postr")
install.packages("posterdown")
install.packages("htmltools")
install.packages("htmltools")
citation("STM")
install.packages("STM
")
install.packages("STM")
install.packages("stm")
citation("stm")
knitr::opts_chunk$set(comment = NA,tidy=TRUE,tidy.opts = list(keep.blank.lines=TRUE,width.cutoff=80))
#Generate two random normal vectors
x=rnorm(100)
y=rnorm(100)
#plot x and y using the plot() function
plot(x,y)
args(plot.default)
plot(x,y,main="Figure-2",xlab="Normal X", ylab="Normal Y")
#change the working directory to the folder containing data_fin.csv or provide the full path with the filename
load("data/data_fin.RData")
#column names
colnames(FinData)
#plot a line plot for Dow Jones stock index prices
plot(FinData$MSFT,type="l",main="Microsoft Prices",ylab="Prices")
library(zoo)
#convert data to class zoo
FinData.ts=zoo(FinData[,2:5],order.by=FinData$Date)
#plot multiple stacked plot
plot(FinData.ts,col=gray.colors(4))#figure-4
load("data/GDP_Yearly.RData")
par1=par()
par(ask=F)
barplot(height=GDP$Australia,names.arg=GDP$Year,
ylab="GDP Per Capita")#figure-5
#convert data to matrix
data=as.matrix(GDP[,2:12])
#create row names
rownames(data)=GDP$Year
#plot a stacked bar plot with legend showing the years
barplot(height=data[1:5,],beside=FALSE,col=rainbow(5),legend=rownames(data[1:5,]),args.legend=list(x="top",horiz=TRUE,inset=-0.1),cex.names=0.6)
par(par1)
pie(x=data[1,],labels=colnames(data))
pairs(data[,1:5])
pairs(~Australia+UK+USA,data=data)
knitr::include_graphics("figure-6_15.png")
#first save the default parameters
par.old=par()
#creat a 2X2 grid
par(mfrow=c(2,2))
#scatterplot
plot(x,y,xlab="Normal X", ylab="Normal Y")
#time series plot
plot(FinData.ts[,1])
#bar plot
barplot(height=GDP$Australia, names.arg=GDP$Year,ylab="GDP Per Capita (Australia)")
#pie chart
pie(x=data[1:11,1],labels=rownames(data[1:11,]))
#set parameters to default
par(par.old)
x=rnorm(100)
y=rnorm(100)
#load the library
library(ggplot2)
#simple scatterplot using qplot (figure-12)
qplot(x,y)
load("data/data_fin.RData")
#line plot using qplot (figure-13)
qplot(x=FinData$Date,y=FinData$DJI,geom="line",xlab="Dates",ylab="Prices",main="DJIA Price Timeseries")
#Read "long" format data
load("data/GDP_l.RData")
#data snapshot
head(GDP_l)
#creating the aesthetics using ggplot
p1=ggplot(GDP_l,aes(Country,GDP,fill=Year))
#figure
p1+geom_bar(stat="identity")
#change the aesthetics to show time on X-axis and GDP values on Y-axis
#the colour line fill be according to the country
p2=ggplot(GDP_l,aes(Year,GDP,colour=Country,group=Country))
p2+geom_line()
#change the aesthetics to show time on X-axis and GDP values on Y-axis
#the colour line fill be according to the country
p2=ggplot(GDP_l,aes(Year,GDP,colour=Country,group=Country))
p2+geom_line()+facet_grid(Country~.)
head(GDP_l)
p2=ggplot(GDP_l,aes(x=Year,y=GDP,fill=Country))
p2+geom_density()
p2+geom_density()+facet_grid()
p2+geom_density()+facet_grid(Country~.)
p2=ggplot(GDP_l,aes(x=Year,y=GDP,colour=Country))
p2+geom_density()+facet_grid(Country~.)
p2=ggplot(GDP_l,aes(y=GDP,colour=Country))
p2+geom_density()+facet_grid(Country~.)
p2=ggplot(GDP_l,aes(x=GDP,colour=Country))
p2+geom_density()+facet_grid(Country~.)
p2=ggplot(GDP_l,aes(x=Year,y=GDP,colour=Country))
p2+geom_density_2d()+facet_grid(Country~.)
p2+geom_histogram()
p2=ggplot(GDP_l,aes(x=GDP,colour=Country))
p2+geom_histogram()
p2=ggplot(GDP_l,aes(x=GDP,fil=Country))
p2=ggplot(GDP_l,aes(x=GDP,fill=Country))
p2+geom_histogram()
p2+geom_histogram(binwidth = 200)
p2+geom_histogram(binwidth = 20)
p2+geom_freepoly()
p2+geom_freqpoly()
p2=ggplot(GDP_l,aes(x=GDP,colour=Country))
p2+geom_freqpoly()
p1=ggplot(GDP_l,aes(x=Country,y=GDP))
p2=p1+geom_bar(aes(fill=Country))
p2
p1=ggplot(GDP_l,aes(x=Country,y=GDP))
p2=p1+geom_bar(aes(fill=Country),stat="identity")
p2
p1=ggplot(GDP_l,aes(x=Year,y=GDP))
p2=p1+geom_bar(aes(fill=Country),stat="identity")
p2
p1=ggplot(GDP_l,aes(x=Year,y=GDP))
p2=p1+geom_bar(aes(fill=Country),stat="identity",dodge=TRUE)
p1=ggplot(GDP_l,aes(x=Year,y=GDP))
p2=p1+geom_bar(aes(fill=Country),stat="identity",position="dodge")
p2
p1=ggplot(GDP_l,aes(x=Year,y=GDP))
p2=p1+geom_bar(aes(fill=Country),stat="identity",position="dodge")
p2
p1=ggplot(GDP_l,aes(x=Year,y=GDP))
p2=p1+geom_bar(aes(fill=Country),stat="identity",position="dodge")
p2
head(FinData)
p1.2=ggplot(FinData,aes(x=Date,y=DJI))
p1.2+geom_path()
p1.2=ggplot(FinData,aes(x=Date,y=DJI))
p1.2+geom_path(fill=DJI)
p1.2=ggplot(FinData,aes(x=Date,y=DJI))
p1.2+geom_path(aes(fill=DJI))
p1.2=ggplot(FinData,aes(x=Date,y=DJI))
p1.2+geom_path(aes(colour=DJI))
p1.2=ggplot(FinData,aes(x=Date,y=DJI))
p1.2+geom_path(colour="darkblue")
p1.2=ggplot(FinData,aes(x=Date,y=DJI))
p1.2+geom_path(colour="darkblue")+geom_smooth()
p1.2=ggplot(FinData,aes(x=Date,y=DJI))
p1.2+geom_path(colour="darkblue")+geom_smooth(colour="black")
p1.3=ggplot(GDP_l,aes(GDP,Year,width=Country))
p1.3+geom_tile(aes(fill=Country))
p1.3=ggplot(GDP_l,aes(GDP,Year,width=GDP))
p1.3+geom_tile(aes(fill=Country))
p1.3+geom_raster(aes(fill=Country))
p1.3+geom_tile(aes(fill=Country))
p1.1=ggplot(GDP_l,aes(x=Year,y=GDP))
p2.1=p1.1+geom_bar(aes(fill=Country),stat="identity",position="dodge")
p2.1+geom_col(aes(fill=Country))
p1.1=ggplot(GDP_l,aes(x=Year,y=GDP))
p2.1=p1.1+geom_bar(aes(fill=Country),stat="identity",position="dodge")
p2.1+geom_col(aes(fill=Country))
p1.2=ggplot(GDP_l[GDP_l$Country%in%c("Australia","UK","USA"),],aes(Country,GDP))
p1.2+geom_col(aes(fill=Country))
p1.2=ggplot(GDP_l[GDP_l$Country%in%c("Australia","UK","USA"),],aes(Country,GDP))
p1.2+geom_col(aes(fill=Year))
p1.1=ggplot(GDP_l,aes(x=Year,y=GDP))
p2.1=p1.1+geom_bar(aes(fill=Country),stat="identity",position="dodge")
p1.2=ggplot(GDP_l[GDP_l$Country%in%c("Australia","UK","USA"),],aes(Year,GDP))
p1.2+geom_col(aes(fill=Country))
p1.2=ggplot(GDP_l[GDP_l$Country%in%c("Australia","UK","USA"),],aes(Year,GDP))
p2.2=p1.2+geom_col(aes(fill=Country))+labs(title="GDP for Aus, US and UK")
p1.2=ggplot(GDP_l[GDP_l$Country%in%c("Australia","UK","USA"),],aes(Year,GDP))
p2.2=p1.2+geom_col(aes(fill=Country))+labs(title="GDP for Aus, US and UK")
p1.2=ggplot(GDP_l[GDP_l$Country%in%c("Australia","UK","USA"),],aes(Year,GDP))
p2.2=p1.2+geom_col(aes(fill=Country))+labs(title="GDP for Aus, US and UK")
p2.2
p1.3=ggplot(FinData,aes(x=Date,y=DJI))
p2.3=p1.3+geom_path(colour="darkblue")+geom_smooth(colour="black")+theme_linedraw()
p2.3
library(gridarrange)
library(gridExtra)
help("grid.arrange")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=3)
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=3,top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=1,top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=2,top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,ncol=3,top="Combined plots in three columns")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=2,layout_matrix=rbind(c(2,3),c(2,NA))top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=2,layout_matrix=rbind(c(2,3),c(2,NA)),top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=2,layout_matrix=rbind(c(2,3),c(1,NA)),top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=2,layout_matrix=rbind(c(2,3),c(1,NA)),widths=c(1,1,2),top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=2,layout_matrix=rbind(c(2,3),c(1,NA)),widths=c(3,6,3),top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=2,layout_matrix=rbind(c(2,3),c(1,NA)),widths=c(6,6,3),top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=2,layout_matrix=rbind(c(2,3),c(1,NA)),widths=c(6,6,12),top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=2,layout_matrix=rbind(c(2,3),c(1,NA)),widths=c(12),top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=2,layout_matrix=rbind(c(2,3),c(1,NA)),widths=c(12,12,12),top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=3,widths=c(12,12,12),top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=3,widths=c(12),top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=3,heights=c(12,6,6),top="Combined plots in three rows")
library(gridExtra)
fig1=grid.arrange(p2.1,p2.2,p2.3,nrow=3,heights=c(20,6,6),top="Combined plots in three rows")
help(ggsave)
ggsave(filename="cobined_plot.pdf",plot=fig1)
library(tidyr)
head(FinData)
help("pivot_longer")
FinData_long=pivot_longer(FinData,names_to="Stock",value_to="Price")
FinData_long=pivot_longer(FinData,cols=-Date,names_to="Stock",value_to="Price")
FinData_long=pivot_longer(data=FinData,cols=-Date,names_to="Stock",value_to="Price")
FinData_long=pivot_longer(data=FinData,cols=-Date,names_to="Stock",values_to="Price")
head(FinData_long)
FinData_long=pivot_longer(data=FinData,names_to="Stock",values_to="Price")
data_stocks=read.csv(file="data/us_stocks.csv",header=TRUE)
head(data_stocks)
FinData_long=pivot_longer(data=data_stocks,cols=-Date,names_to="Stock",values_to="Price")
library(tidyr)
FinData_long=pivot_longer(data=data_stocks,cols=-Date,names_to="Stock",values_to="Price")
head(FinData_long)
FinData_wide=pivot_wider(FinData_long,names_from = Stock,values_from=Price)
head(FinData_wide)
bookdown::render_book("index.Rmd",output_format = "bookdown::gitbook")
library(ggplot2)
library(maps)
library(ggthemes)
library(plotly)
d1=read.csv("https://raw.githubusercontent.com/RamiKrispin/coronavirus-csv/master/coronavirus_dataset.csv")
d1=d1[d1$type=="confirmed",]
d2=aggregate(d1$cases,by=list(Lat=d1$Lat,Long=d1$Long,Country.Region=d1$Country.Region,Date=d1$date),FUN=sum)
colnames(d2)[5]="cases"
world=map_data("world")
w1=ggplot()+geom_polygon(data=world,aes(colour=region,x=long,y=lat,group=group),fill="white")+theme_map()+theme(legend.position = "none")+scale_fill_brewer(palette = "Blues")
map <- w1 +
geom_point(aes(x = Long, y = Lat, size = cases,colour=Country.Region),
data =d2,
alpha = 1) +
scale_size_continuous(range = c(2, 8)) +
labs(title= 'COVID-19 Confirmed Cases')
map
#interactive version
ggplotly(map)
bookdown::render_book("index.Rmd",output_format = "bookdown::gitbook")
bookdown::render_book("index.Rmd",output_format = "bookdown::gitbook")
install.packages(c("anomalize", "backports", "bookdown", "calibrate", "clustermq", "credentials", "cubature", "drake", "DT", "ecm", "fable", "fabletools", "feasts", "feisr", "finreportr", "fixest", "FKF", "flexdashboard", "ForeCA", "fpc", "fs", "ftsa", "future.apply", "gam", "ggforce", "ggplot2", "ggpubr", "glmnet", "gower", "gplots", "gravitas", "haven", "htmlTable", "isoband", "jsonlite", "jtools", "knitr", "labelled", "lamW", "lpirfs", "mda", "meboot", "mgm", "mnormt", "multDM", "NGSSEML", "NlinTS", "nloptr", "nonlinearTseries", "nonnest2", "nvmix", "odbc", "odpc", "openssl", "panelr", "party", "phonics", "pkgload", "pointblank", "pomp", "processx", "psd", "quanteda", "raster", "RcppParallel", "Rdpack", "recipes", "rgdal", "RMariaDB", "roll", "roxygen2", "rstatix", "sadists", "segmented", "sf", "shiny", "smooth", "spData", "spdep", "survival", "texreg", "textplot", "tibbletime", "tidyquant", "timetk", "tinytex", "tsibble", "txtq", "units", "V8", "vctrs", "WDI", "websocket", "xfun", "xgboost", "XML"))
install.packages(c("anomalize", "backports", "bookdown", "calibrate", "clustermq", "credentials", "cubature", "drake", "DT", "ecm", "fable", "fabletools", "feasts", "feisr", "finreportr", "fixest", "FKF", "flexdashboard", "ForeCA", "fpc", "fs", "ftsa", "future.apply", "gam", "ggforce", "ggplot2", "ggpubr", "glmnet", "gower", "gplots", "gravitas", "haven", "htmlTable", "isoband", "jsonlite", "jtools", "knitr", "labelled", "lamW", "lpirfs", "mda", "meboot", "mgm", "mnormt", "multDM", "NGSSEML", "NlinTS", "nloptr", "nonlinearTseries", "nonnest2", "nvmix", "odbc", "odpc", "openssl", "panelr", "party", "phonics", "pkgload", "pointblank", "pomp", "processx", "psd", "quanteda", "raster", "RcppParallel", "Rdpack", "recipes", "rgdal", "RMariaDB", "roll", "roxygen2", "rstatix", "sadists", "segmented", "sf", "shiny", "smooth", "spData", "spdep", "survival", "texreg", "textplot", "tibbletime", "tidyquant", "timetk", "tinytex", "tsibble", "txtq", "units", "V8", "vctrs", "WDI", "websocket", "xfun", "xgboost", "XML"))
install.packages(c("anomalize", "backports", "bookdown", "calibrate", "clustermq", "credentials", "cubature", "drake", "DT", "ecm", "fable", "fabletools", "feasts", "feisr", "finreportr", "fixest", "FKF", "flexdashboard", "ForeCA", "fpc", "fs", "ftsa", "future.apply", "gam", "ggforce", "ggplot2", "ggpubr", "glmnet", "gower", "gplots", "gravitas", "haven", "htmlTable", "isoband", "jsonlite", "jtools", "knitr", "labelled", "lamW", "lpirfs", "mda", "meboot", "mgm", "mnormt", "multDM", "NGSSEML", "NlinTS", "nloptr", "nonlinearTseries", "nonnest2", "nvmix", "odbc", "odpc", "openssl", "panelr", "party", "phonics", "pkgload", "pointblank", "pomp", "processx", "psd", "quanteda", "raster", "RcppParallel", "Rdpack", "recipes", "rgdal", "RMariaDB", "roll", "roxygen2", "rstatix", "sadists", "segmented", "sf", "shiny", "smooth", "spData", "spdep", "survival", "texreg", "textplot", "tibbletime", "tidyquant", "timetk", "tinytex", "tsibble", "txtq", "units", "V8", "vctrs", "WDI", "websocket", "xfun", "xgboost", "XML"))
bookdown::render_book("index.Rmd",format="bookdown::gitbook")
bookdown::render_book("index.Rmd",format="bookdown:gitbook")
bookdown::render_book("index.Rmd",output_format="bookdown:gitbook")
bookdown::render_book("index.Rmd",output_format="bookdown::gitbook")

devtools::install_github("yihui/knitr")
render_book()
library(bookdown)
render_book()
help(render_book)
render_book("index.Rmd")
render_book("index.Rmd")
render_book("index.Rmd")
help(package=bookdown)
render_book()
bookdown::render_book()
bookdown::render_book("index.Rmd")
getwd()
bookdown::bookdown_site()
bookdown::bookdown_site("index.Rmd")
bookdown::html_book()
bookdown::html_book("index.Rmd")
blogdown:::serve_site()
blogdown:::serve_site()
bookdown::render_book("index.Rmd",format="bookdown::gitbook")
bookdown::render_book("index.Rmd",output_format="bookdown::gitbook")
bookdown::render_book("index.Rmd",output_format="bookdown::gitbook")
getwd
getwd()
bookdown::render_book("index.Rmd")
setwd("C:/One_Drive_MQ/OneDrive - Macquarie University/R_Work/10jul/datasets")
knitr::opts_chunk$set(echo = TRUE)
heatflux=data.csv("heatflux.csv")
heatflux=read.csv("heatflux.csv")
str(heatflux)
View(heatflux)
library(bookdown)
render_book(index.Rmd)
render_book("index.Rmd")
setwd("C:/One_Drive_MQ/OneDrive - Macquarie University/R_Work/bookdown-demo-v1")
setwd("C:/One_Drive_MQ/OneDrive - Macquarie University/MQ_Work/HDR Supervision/Evan/R_code")
library(xts)
library(highfrequency)
data1=read.csv("CBA_eq_52_days.csv")
data2=data1[,c(12,4,2,5)]
data2$full_timestamp=as.POSIXct(strptime(data2$full_timestamp,"%Y-%m-%d %H:%M:%S"),tz="UTC")
data2=as.xts(as.matrix(data2[,-1]),order.by=data2$full_timestamp,tzone="UTC")
d2=exchangeHoursOnly(data2,daybegin = "10:00:00",dayend="16:00:00")
colnames(d2)=c("PRICE","SYMBOL","SIZE")
d3.2=mergeTradesSameTimestamp(d2)
d3=aggregatets(d3.2,on="minutes",k=5)
d3.3=exchangeHoursOnly(d3,daybegin = "10:00:00")
d4.1=d3.3$PRICE
d6=as.xts(as.numeric(d4.1$PRICE),order.by = index(d4.1))
colnames(d6)="PRICE"
d4=spotvol(d2, method = "detper", on = "minutes", k = 5, marketopen = "10:00:00", marketclose = "16:00:00",tz="UTC")
res1=spotvol(d6,k=5, tz="UTC",marketopen = "10:00:00",method="stochper",on="minutes")
setwd("C:/One_Drive_MQ/OneDrive - Macquarie University/R_Work/bookdown-demo-v1")
install.packages("bookdown")
install.packages("bookdown",dependencies = TRUE)
bookdown::render_book("index.rmd","bookdown::gitbook")
bookdown::render_book("index.rmd","bookdown::gitbook")
bookdown::render_book("index.rmd","bookdown::gitbook")
bookdown::render_book("index.rmd","bookdown::gitbook")
bookdown::render_book("index.rmd","bookdown::gitbook")
bookdown::render_book("index.rmd","bookdown::gitbook")
bookdown::render_book("index.rmd","bookdown::gitbook")
bookdown::render_book("index.rmd","bookdown::gitbook")
options(str=list(vec.len=2))
#swiss dataframe has standardized fertility measure and socio-economic indicators
#for each of 47 French-speaking provinces of Switzerland at about 1888.
data(swiss)
str(swiss)
#using names and row.names
names(swiss)#name of the columns (can also use colnames)
colnames(swiss)
row.names(swiss)#name of the rows
swiss$Fertility #returns the vector of data in the column Fertility
num1=seq(1:5)
ch1=c("A","B","C","D","E")
df1=data.frame(ch1,num1)
df1
knitr::include_graphics("CO2_qPVWsAAErbv.png large.png")
knitr::include_graphics("CO2_qPVWsAAErbv.png large.png")
#first element of lst1
lst1[[1]]
e1 = c(2, 3, 5) #element-1
e2 = c("aa", "bb", "cc", "dd", "ee")  #element-2
e3 = c(TRUE, FALSE, TRUE, FALSE, FALSE)#element-3
e4=df1 #element-4 (previously constructed data frame)
lst1 = list(e1,e2,e3, e4)   # lst contains copies of e1,e2,e3,e4
str(lst1)#show the structure of lst1
#first element of lst1
lst1[[1]]
lst1[1]
bookdown::render_book("index.Rmd","gitbook")
bookdown::render_book("index.Rmd","bookdown::htmlbook")
bookdown::render_book("index.Rmd","bookdown::html")
bookdown::render_book("index.Rmd","bookdown::gitbook")
bookdown::render_book("index.Rmd","bookdown::pdf")
bookdown::render_book("index.Rmd","bookdown::gitbook")
knitr::opts_chunk$set(comment = NA,tidy=TRUE,tidy.opts = list(keep.blank.lines=TRUE,width.cutoff=80))
bookdown::render_book("index.Rmd","bookdown::gitbook")
args(read.table)
data_readtable=read.table("demo_data.txt",sep="\t",header=TRUE)
data_readtable=read.table("demo_data.txt",sep="\t",header=TRUE)
data_readtable=read.table("data\demo_data.txt",sep="\t",header=TRUE)
data_readtable=read.table("\data\demo_data.txt",sep="\t",header=TRUE)
data_readtable=read.table("data/demo_data.txt",sep="\t",header=TRUE)
head(data_readtable)
#saving data as an object in .Rdata format
save(data_readtable,file="data1.Rdata")
#saving data into another text file
write.table(data_readtable,file="data1.txt")
#saving data as an object in .Rdata format
save(data_readtable,file="data/data1.Rdata")
#saving data into another text file
write.table(data_readtable,file="data/data1.txt")
help("saveRDS")
saveRDS(data_readtable,file="data/data1_rds.Rds")
data_readtable2=readRDS("data/data1_rds.Rds")
#Check the working directory before importing else provide full path
data_readcsv=read.csv("data/demo_data.csv")
head(data_readcsv)
data(iris)#R inbuilt dataset
head(iris)
write.csv(iris,"data/data_iris.csv",row.names=FALSE)
knitr::include_graphics("Annotation 2020-06-09 150513.png")
bookdown::render_book("index.Rmd","bookdown::gitbook")
bookdown::render_book("index.Rmd","bookdown::pdf_book")
bookdown::render_book("index.Rmd","bookdown::pdf_book")
bookdown::render_book("index.Rmd","bookdown::pdf_book")
webshot::install_phantomjs()
bookdown::render_book("index.Rmd","bookdown::gitbook")
reticulate::repl_python()
import pandas as pd
import os
os.getcwd()
data1=pd.read_csv("data\demo_data.csv")
data1.head()
data1.summary()
quit
data_stocks=read.csv("us_stocks.csv")
data_stocks=read.csv("data/us_stocks.csv")
#remove NAs from the data
data_stocks=na.omit(data_stocks)
m_msft=mean(data_stocks$MSFT)
m_aapl=mean(data_stocks$AAPL)
if(m_msft>m_aapl){
g_mean=m_msft }else{
g_mean=m_aapl
}
g_mean #print greater mean
data_stocks=read.csv("data/us_stocks.csv")
#remove NAs from the data
data_stocks=na.omit(data_stocks)
m_msft=mean(data_stocks$MSFT)
m_aapl=mean(data_stocks$AAPL)
if(m_msft>m_aapl){
g_mean=m_msft
message("Msft mean is higher")}else{
g_mean=m_aapl
message("Aapl mean is higher")
}
g_mean #print greater mean
print(paste("Msft has the higher mean",m_msft," "))
print(paste("Msft has the higher mean",m_msft,""))
print(paste("Msft has the higher mean",m_msft))
message(paste("Msft has the higher mean",m_msft))
message(paste("Msft has the higher mean of",m_msft))
#arguments to ifelse
args(ifelse)
g_mean=ifelse(m_msft>m_aapl,message(paste("Msft has the higher mean of",m_msft)),message(paste("Aapl has the higher mean of",m_aapl)))
#arguments to ifelse
args(ifelse)
ifelse(m_msft>m_aapl,message(paste("Msft has the higher mean of",m_msft)),message(paste("Aapl has the higher mean of",m_aapl)))
#arguments to ifelse
args(ifelse)
g_mean=ifelse(m_msft>m_aapl,m_msft,m_aapl)
g_mean
bookdown::render_book("index.rmd","bookdown::gitbook")
#construct the loop
j=0
for(i in 1:15){
j=j+i #add i to j
print(j)#print the sequential sum
}
#intialise j and i
j=0
i=1
#one can also use i<=15
while (i<16){
j=j+i
i=i+1
print(j)
}
#the following function takes 2 arguments, x a data frame, dates to indicate if there are dates in the first column
cal_mean=function(x,dates=TRUE){
num_cols=ncol(x)#calculate the number of columns
#num_cols=ifelse(dates==TRUE,num_cals-1,num_cals)
#lets use a list and a loop to refresh our concepts
m_stocks=list()#creating an empty list
#use for loop
#assign the starting value based on the dates column,we skip dates column if they are present
#(dates are basically row names to more generalised version will be to check for row names)
l=ifelse(dates==TRUE,2,1)
j=1#starting point in the list m_stocks
for (i in l:num_cols)
{
m_stocks[[j]]=mean(x[,i])
j=j+1
}
names(m_stocks)=colnames(x[,l:num_cols])
return(m_stocks)
}
#lets call the function cal_mean (output not shown)
cal_mean(data_stocks,TRUE)
#lets call the function with no dates column
cal_mean(data_stocks[,2:ncol(data_stocks)],FALSE)
bookdown::render_book("index.Rmd","bookdown::gitbook")
bookdown::render_book("index.Rmd","bookdown::gitbook")
data_stocks=read.csv(file="data/us_stocks.csv",header=TRUE)
head(data_stocks)
#First create a vector having the returns for msft
msft_ret=100*diff(log(data_stocks$MSFT))
#combine the vector with the data
data_stocks_r=cbind(data_stocks,MSFT_RET=msft_ret)#this will generate an error message
#different length
length(msft_ret)
length(data_stocks$MSFT)
#add one more value to vector msft_ret
msft_ret=c(0,msft_ret)
#check the length
length(msft_ret)
#lets combine now (it should work)
data_stocks_r=cbind(data_stocks,MSFT_RET=msft_ret)
head(data_stocks_r)#shows one more column added to the data
#First create a vector having the returns for msft
msft_ret=100*diff(log(data_stocks$MSFT))
#combine the vector with the data
data_stocks_r=cbind(data_stocks,MSFT_RET=msft_ret)#this will generate an error message
bookdown::render_book("index.Rmd","bookdown::gitbook")
bookdown::render_book("index.Rmd","bookdown::gitbook")

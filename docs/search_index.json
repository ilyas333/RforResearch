[
["6-graphics-in-r-part-ii.html", "Chapter 6 Graphics in R (Part-II) ", " Chapter 6 Graphics in R (Part-II) "],
["6-1-interactive-plots-using-plotly.html", "6.1 Interactive Plots using Plotly", " 6.1 Interactive Plots using Plotly Here we will use the COVID-19 data provided by John Hopkins University library(ggplot2) library(maps) library(ggthemes) library(plotly) library(scales) library(dplyr) library(tidyr) # download data d1 = read.csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&quot;, check.names = FALSE) # head(d1) Data is in wide format let’s convert in long format for visualisation # rename Provice/State and Country columns colnames(d1)[1:2] = c(&quot;State&quot;, &quot;Country&quot;) d1.2 = pivot_longer(d1, cols = -c(State, Country, Lat, Long), names_to = &quot;Date&quot;, values_to = &quot;Cases&quot;) # convert dates d1.2$Date = as.Date(d1.2$Date, format = &quot;%m/%e/%y&quot;) Aggregate cases by day (dropping the state) d2 = aggregate(d1.2$Cases, by = list(Lat = d1.2$Lat, Long = d1.2$Long, Country = d1.2$Country, Date = d1.2$Date), FUN = sum) colnames(d2)[5] = &quot;Cases&quot; # reorder d2 = d2[, c(4, 1, 2, 3, 5)] Let’s find top 10 by case numbers Using aggregate to find sum by country to find top 10 top1 = aggregate(d2$Cases, by = list(Date = d2$Date, Country = d2$Country), FUN = sum) # select the last date to get overall total top10 = top1[top1$Date == &quot;2020-07-25&quot;, ] # select top 10 top10 = top10[order(-top10$x), ][1:10, ] # let&#39;s include Aus top10_country = c(top10$Country, &quot;Australia&quot;) Use ggplot to create a line chart colnames(top1)[3] = &quot;Cases&quot; data_p = top1[top1$Country %in% c(as.character(top10_country)), ] p1 = ggplot(data = data_p, aes(Date, log(Cases), color = Country, group = Country)) + geom_line(stat = &quot;identity&quot;, size = 1) + scale_x_date(labels = date_format(&quot;%d/%m&quot;), breaks = &quot;7 days&quot;) + theme_wsj() p1 Figure 6.1: Line Chart with Custom Theme Create custom color vector and a line chart with basic theme to convert to plotly 6.2 myCol2 = c(&quot;slateblue1&quot;, &quot;purple3&quot;, &quot;turquoise2&quot;, &quot;skyblue&quot;, &quot;steelblue&quot;, &quot;blue2&quot;, &quot;navyblue&quot;, &quot;orange&quot;, &quot;tomato&quot;, &quot;coral2&quot;, &quot;palevioletred&quot;, &quot;violetred&quot;, &quot;red2&quot;, &quot;springgreen2&quot;, &quot;yellowgreen&quot;, &quot;palegreen4&quot;, &quot;wheat2&quot;, &quot;tan&quot;, &quot;tan2&quot;, &quot;tan3&quot;, &quot;brown&quot;, &quot;grey70&quot;, &quot;grey50&quot;, &quot;grey30&quot;) p2 = ggplot(data_p, aes(Date, Cases, group = Country, color = Country)) + geom_line(size = 1.5) + geom_point(size = 1.5) + scale_colour_manual(values = myCol2, &quot;Countries&quot;) + geom_text(data = data_p[data_p$Date == max(data_p$Date), ], aes(x = as.Date(max(data_p$Date) + 4), label = Country), hjust = -0.01, nudge_y = 0.01, show.legend = FALSE) + expand_limits(x = as.Date(c(min(data_p$Date), max(data_p$Date) + 5))) + scale_x_date(breaks = seq(as.Date(min(data_p$Date)), as.Date(max(data_p$Date) + 5), by = &quot;7 days&quot;), date_labels = &quot;%m/%d&quot;) + scale_y_continuous(labels = comma) + theme_classic() + theme(axis.title = element_text(size = 15, face = &quot;bold&quot;)) p2 Figure 6.2: Line Chart Convert to plotly for interactive graphics 6.3 fig_p2 = ggplotly(p2) fig_p2 Figure 6.3: Interactive Line Chart "],
["6-2-anmiation-using-gganimate.html", "6.2 Anmiation using gganimate", " 6.2 Anmiation using gganimate We can also use the gganimate package to convert the image into a gif. Its also possible to create animations with plotly 6.4 library(gganimate) p1.anim = p1 + transition_reveal(Date) anim_p1 = animate(p1.anim, fps = 2, start_pause = 2, end_pause = 5, rewind = FALSE, width = 800, height = 1000) anim_save(filename = &quot;covid_cases_log_2020jul.gif&quot;, animation = anim_p1) Figure 6.4: Animated Graph "],
["6-3-plot-maps.html", "6.3 Plot Maps", " 6.3 Plot Maps We can also plot the data on a map 6.5 world = map_data(&quot;world&quot;) w1 = ggplot() + geom_polygon(data = world, aes(color = region, x = long, y = lat, group = group), fill = &quot;white&quot;) + theme_map() + theme(legend.position = &quot;none&quot;) + scale_fill_brewer(palette = &quot;Blues&quot;) map1 = w1 + geom_point(aes(x = Long, y = Lat, size = Cases, colour = Country), data = d2) + labs(title = &quot;COVID-19 Cases&quot;) # static version map1 Figure 6.5: Map Interactive version using plotly 6.6 # interactive version ggplotly(map1, width = 1200, height = 600) Figure 6.6: Interactive Map "]
]

[
["index.html", "R for Research Chapter 1 Preface", " R for Research Abhay Singh 2020-06-09 Chapter 1 Preface This is a compilation of handouts for \\(R^2: R for Research\\) written in Markdown. "],
["2-what-is-r.html", "Chapter 2 What is R?", " Chapter 2 What is R? According to the official webpage: R is a language and environment for statistical computing and graphics. It is a GNU project which is similar to the S language and environment which was developed at Bell Laboratories (formerly AT&amp;T, now Lucent Technologies) by John Chambers and colleagues. R can be considered as a different implementation of S. There are some important differences, but much code written for S runs unaltered under R. http://www.r-project.org/about.html According to Wikipedia R is a free software programming language and a software environment for statistical computing and graphics. The R language is widely used among statisticians and data miners for developing statistical software and data analysis. Polls and surveys of data miners are showing R’s popularity has increased substantially in recent years. To Summarise R is the most amazing free statistical software ever! This recent video by Revolution Analytics does a great job in summarizing R ! "],
["2-1-why-should-we-learn-r.html", "2.1 Why should we learn R?", " 2.1 Why should we learn R? R follows a type inference1 coding structure and provides a wide variety of statistical and graphical techniques, including; Linear and non-linear modelling Univariate &amp; Multivariate Statistics Classical statistical tests Time-series analysis/ Econometrics Simulation and Modelling Datamining-classification, clustering etc. For computationally intensive tasks, C, C++, and Fortran code can be linked and called at run time. R is easily extensible through functions and extensions, and the R community is noted for its active contributions in terms of packages. # Number of R Packages length(available.packages(repos = &quot;http://cran.us.r-project.org&quot;)[, 1]) [1] 15763 Total 15763 packages and counting Type inference refers to the automatic deduction of the type of an expression in a programming language.↩︎ "],
["2-2-Rinstall.html", "2.2 Installing R and RStudio on Windows", " 2.2 Installing R and RStudio on Windows The latest version of R can be download from the R homepage. R download page: http://www.cran.r-project.org/bin/windows/base/ The page also provides some instructions and FAQ’s on R installation. RStudio IDE ( IDE: Integrated Development Environment) is a powerful and productive user interface for R. It’s free and open source, and works great on Windows, Mac, and Linux "],
["2-3-rstudio-guiide.html", "2.3 RStudio GUI/IDE", " 2.3 RStudio GUI/IDE RStudio GUI is composed of 4 panes which can be rearranged according to the requirements. There are a lot of short introductions to RStudio available online so we will not go into more details. The figure below gives the snapshot of RStudio GUI. Figure 2.1: RStudio IDE A short intro to RStudio ! RStudio Overview - 1:30 from RStudio, Inc. on Vimeo. "],
["2-4-installing-packages.html", "2.4 Installing Packages", " 2.4 Installing Packages The easiest way to install packages is to do it via R console. The command install.packages(“package name”) installs R packages directly from internet. Other options to install various dependencies to a package can be easily specified when calling this function. A call to this function asks the user to chose a CRAN mirror at the first instance. Run the following to install Quantreg package on R. Also use the help function to get the details. # Install a package using RStudio Console install.packages(&quot;quantreg&quot;, dependencies = c(&quot;Depends&quot;, &quot;Suggests&quot;)) install.packages(c(&quot;zoo&quot;, &quot;reshape2&quot;, &quot;quantreg&quot;, &quot;e1071&quot;, &quot;foreign&quot;, &quot;psych&quot;, &quot;pastecs&quot;, &quot;ggplot2&quot;, &quot;stargazer&quot;, &quot;formatR&quot;, &quot;plm&quot;, &quot;xts&quot;, &quot;tseries&quot;, &quot;fArma&quot;), dependencies = TRUE) # to be updated "],
["2-5-getting-help.html", "2.5 Getting Help", " 2.5 Getting Help As R is constantly evolving and new functions/packages are introduced every day it is good to know sources of help. The most basic help one can get is via the help() function. This function shows the help file for a function which has been created by package managers. help(&quot;function name&quot;) The following can be used to search for a function etc. #Replace the &#39;search string&#39; with the expression you want to search ??search string All the R packages (with few exceptions) have a user’s manual listing the functions in a package. This can be downloaded in PDF format from the R package download page2. R also provides some search tools given at http://cran.r-project.org/search.html The R Site search is helpful in searching for topics related to problem in hand. Other than these various good R related blogs are on the internet which can be really helpful. A combined upto date view of 452 contributed blogs can be found at R-bloggers3. Over all there quite a big community of R Users and help can be found for most of the topics. For example reference manual for quantreg package is at http://cran.r-project.org/web/packages/quantreg/quantreg.pdf↩︎ Go to [www.r-bloggers.com]: www.r-bloggers.com↩︎ "],
["2-6-task-views-in-r-introduction-installation.html", "2.6 Task Views in R-Introduction &amp; Installation", " 2.6 Task Views in R-Introduction &amp; Installation Task Views in R provide packages grouped together according to a generalized task they are used for. Table below gives the name of task views available4. The following commands install the package ctv and then Finance task view. # install package task views install.packages(&quot;ctv&quot;) library(&quot;ctv&quot;) #R function library() is used to call a package # install Finance task view install.views(&quot;Finance&quot;) Figure 2.2: Task Views This list of available task views can be found at http://cran.r-project.org/web/views/↩︎ "],
["2-7-r-core-packages.html", "2.7 R core packages", " 2.7 R core packages R comes with few bundled core packages which provide various data analytics/statistical capabilities to R. The base package in R has basic functions and operators which are required for analytical programming, stats is another example of core R packages. # List of R core packages row.names(installed.packages(priority = &quot;base&quot;)) [1] &quot;base&quot; &quot;compiler&quot; &quot;datasets&quot; &quot;graphics&quot; &quot;grDevices&quot; &quot;grid&quot; [7] &quot;methods&quot; &quot;parallel&quot; &quot;splines&quot; &quot;stats&quot; &quot;stats4&quot; &quot;tcltk&quot; [13] &quot;tools&quot; &quot;utils&quot; "],
["2-8-example-1-hello-r.html", "2.8 Example-1 Hello R!", " 2.8 Example-1 Hello R! message(&quot;Hello R!&quot;) #use to display messages Hello R! print(&quot;Hello R!&quot;) #use to display variables/messages [1] &quot;Hello R!&quot; msg = &quot;Hello R!&quot; #type inference no need to define strings! print(msg) [1] &quot;Hello R!&quot; R packages not just come with demo programs but the help files for the functions in R packages mostly have example codes for the particular function. R function example() is helpful in running the example code for a function. For running example code for in quantreg package type example(rq, package=”quantreg”) "],
["3-r-data-types-and-data-structures.html", "Chapter 3 R Data Types and Data Structures", " Chapter 3 R Data Types and Data Structures When human judgement and big data intersect there are some funny things that happen. -Nate Silver "],
["3-1-data-types.html", "3.1 Data Types", " 3.1 Data Types As per R’s official language definitions; in every computer language variables provide a means of accessing the data stored in memory. R does not provide direct access to the computer’s memory but rather provides a number of specialized data structures we will refer to as objects. These objects are referred to through symbols or variables. 3.1.1 Double Doubles are numbers like 5.0, 5.5, 10.999 etc. They may or may not include decimal places. Doubles are mostly used to represent a continuous variable like serial number, weight, age etc. x = 8.5 is.double(x) #to check if the data type is double [1] TRUE 3.1.2 Integer Integers are natural numbers. x = 9 typeof(x) [1] &quot;double&quot; # The following specifically assigns an integer to x x = as.integer(9) typeof(x) [1] &quot;integer&quot; 3.1.3 Logical A variable of data type logical has the value TRUE or FALSE. To perform calculation on logical objects in R the FALSE is replaced by a zero and TRUE is replaced by 1. x = 11 y = 10 a = x &gt; y a [1] TRUE typeof(a) [1] &quot;logical&quot; 3.1.4 Character Characters represent the string values in R. An object of type character can have alphanumeric strings. Character objects are specified by assigning a string or collection of characters between double quotes (“ string”) . Everything in a double quote is considered a string in R. 3.1.5 Factor -Factor is an important data type to represent categorical data. This also comes handy when dealing with Panel or Longitudinal data. Example of factors are Blood type (A , B, AB, O), Sex (Male or Female). Factor objects can be created from character object or from numeric object. -The operator c is used to create a vector of values which can be of any data type. b.type = c(&quot;A&quot;, &quot;AB&quot;, &quot;B&quot;, &quot;O&quot;) #character object # use factor function to convert to factor object b.type = factor(b.type) b.type [1] A AB B O Levels: A AB B O # to get individual elements (levels) in factor object levels(b.type) [1] &quot;A&quot; &quot;AB&quot; &quot;B&quot; &quot;O&quot; 3.1.6 Date &amp; Time -R is capable of dealing calendar dates and times. It is an important object when dealing with time series models. The function as.Date can be used to create an object of class Date. - see help(as.Date) for more details about the format of dates. date1 = &quot;31-01-2012&quot; date1 = as.Date(date1, &quot;%d-%m-%Y&quot;) date1 [1] &quot;2012-01-31&quot; data.class(date1) [1] &quot;Date&quot; # The date and time are internally interpreted as Double so the function typeof # will return the type Double typeof(date1) [1] &quot;double&quot; "],
["3-2-data-structures-in-r.html", "3.2 Data Structures in R", " 3.2 Data Structures in R Every data analysis requires the data to be structured in a well defined way. These coherent ways to put together data forms some basic data structures in R. Every data set intended for analysis has to be imported in R environment as a data structure. R has the following basic data structures: • Vector • Matrix • Array • Data Frame • Lists 3.2.1 Vector Vectors are group of values having same data types. There can be numeric vectors, character vector and so on. Vectors are mostly used to represent a single variable in a data set. A vector is constructed using the function c. The same function c can be used to combine different vectors of same data type. vec1 = c(1, 2, 3, 4, 5) vec1 [1] 1 2 3 4 5 The str function can be used to view the data structure of an object 3.2.2 Matrices A matrix is a collection of data elements arranged in a two-dimensional rectangular layout. Like vectors all the elements in a matrix are of same data type. \\[\\left[\\begin{array}{cc} 1 &amp; 2\\\\ 3 &amp; 4\\\\ 5 &amp; 6 \\end{array}\\right]\\] The function \\(\\mathtt{matrix}\\) is used to create matrices in R. Note that all the elements in a matrix object are of same basic type. Lets create the matrix in the example above. m1 = matrix(c(1, 2, 3, 4, 5, 6), nrow = 3, ncol = 2, byrow = TRUE) # nrow-specify number of rows, ncol-specify number of columns, byrow-fill the # matrix in rows with the data supplied m1 #print the matrix [,1] [,2] [1,] 1 2 [2,] 3 4 [3,] 5 6 A vector can be converted to matrix using \\(\\mathtt{dim}\\) function, e.g: m2 = c(1, 2, 3, 4, 5, 6) dim(m2) = c(3, 2) #the matrix will be filled by columns m2 [,1] [,2] [1,] 1 4 [2,] 2 5 [3,] 3 6 # use dim to get the dimension (#rows and #columns) of a matrix dim(m1) [1] 3 2 ** Matrix Manipulations ** For calculations on matrices; all the mathematical functions available for vectors are applicable on a matrix. All operations are applied on each element in a matrix, e.g. m3 = m1 * 2 # all elements will be multiplied by 2 individually m3 [,1] [,2] [1,] 2 4 [2,] 6 8 [3,] 10 12 A matrix can be multiplied with a vector as long as the length of the vector is a multiple of length of the matrix. Try different combinations of matrix and vector arithmetic to see the results and errors. Mathematical matrix operations are also available for matrices in R. For instance \\(\\mathtt{\\%*\\%}\\) is used for matrix multiplication, the matrices must agree dimensionally for matrix multiplication. Note the use of \\(\\mathtt{:}\\) operator to create a sequence. dim(m1) # 3 rows and 2 columns [1] 3 2 # create another matrix with 2 rows and 3 columns m3 = matrix(c(1:6), ncol = 3) m1 %*% m3 [,1] [,2] [,3] [1,] 5 11 17 [2,] 11 25 39 [3,] 17 39 61 R facilitates various matrix specific operations. Table 1 gives most of the available functions and operators. Use \\(\\mathtt{help()}\\) or \\(\\mathtt{?}\\) followed by function name to get more details about the operators and functions. Table : Functions and operators for matrices Operator or Function Description X * Y Element-wise multiplication X %*% Y Matrix multiplication Y %o% X Outer product. XB’ crossprod(X,Y) X’Y crossprod(X) X’X t(X) Transpose diag(x) Creates diagonal matrix with elements of x in the principal diagonal diag(X) Returns a vector containing the elements of the principal diagonal diag(k) If k is a scalar, this creates a k x k identity matrix. Go figure. solve(X, b) Returns vector x in the equation b = Xx (i.e., X-1b) solve(X) Inverse of X where X is a square matrix. y=eigen(X) y$val are the eigenvalues of X y$vec are the eigenvectors of X y=svd(X) Singular value decomposition of X. R = chol(X) Choleski factorization of X. Returns the upper triangular factor, such that R’R = X. y = qr(X) QR decomposition of X. cbind(X,Y,…) Combine matrices(vectors) horizontally. Returns a matrix. rbind(X,Y,…) Combine matrices(vectors) vertically. Returns a matrix. rowMeans(X) Returns vector of row means. rowSums(X) Returns vector of row sums. colMeans(X) Returns vector of column means. colSums(X) Returns vector of column means. 3.2.3 Arrays Arrays are the generalisation of vectors and matrices. A vector in R is a one dimensional array and a matrix a two dimensional array. An array is a multiply subscripted collection of data entries of the same data type. Arrays can be constructed using the function \\(\\mathtt{array}\\), for example5 z = c(1:24) #vector of length 24 # constructing a 3 by 4 by 2 array a1 = array(z, dim = c(3, 4, 2)) a1 , , 1 [,1] [,2] [,3] [,4] [1,] 1 4 7 10 [2,] 2 5 8 11 [3,] 3 6 9 12 , , 2 [,1] [,2] [,3] [,4] [1,] 13 16 19 22 [2,] 14 17 20 23 [3,] 15 18 21 24 Individual elements of an array are accessed by referring them by their index. This is done by giving the name of the array followed by the subscript (index) in this square bracket separated by commas. We try to access the element [1,3,1] of array a1 in the following example # element in the row 1 and column 3 in the first subset a1[1, 3, 1] [1] 7 3.2.4 Data Frames Data frame forms the most convenient data structures in R to represent tabular data. In quantitative research data is often in the form of data tables. These data tables have multiple rows and can have multiple columns with each column representing a different variable (quantity). A data frame in R is the most natural way to represent these data sets as it can have different data type in the data frame object. Most statistical routines in R require a data frame as input. The following example uses an important function \\(\\mathtt{str}\\) on R’s inbuilt data frame “swiss”. \\(\\mathtt{str}\\) function is used to see the internal structure of an object in R. options(str = list(vec.len = 2)) # swiss dataframe has standardized fertility measure and socio-economic # indicators for each of 47 French-speaking provinces of Switzerland at about # 1888. data(swiss) str(swiss) &#39;data.frame&#39;: 47 obs. of 6 variables: $ Fertility : num 80.2 83.1 92.5 85.8 76.9 ... $ Agriculture : num 17 45.1 39.7 36.5 43.5 ... $ Examination : int 15 6 5 12 17 ... $ Education : int 12 9 5 7 15 ... $ Catholic : num 9.96 84.84 ... $ Infant.Mortality: num 22.2 22.2 20.2 20.3 20.6 ... Data frames have two attributes namely; \\(\\mathtt{names}\\) and \\(\\mathtt{row.names}\\), these two contains the column names and row names respectively. The data in the named column can be accessed by the \\(\\mathtt{\\$}\\) operator. # using names and row.names names(swiss) #name of the columns (can also use colnames) [1] &quot;Fertility&quot; &quot;Agriculture&quot; &quot;Examination&quot; &quot;Education&quot; [5] &quot;Catholic&quot; &quot;Infant.Mortality&quot; colnames(swiss) [1] &quot;Fertility&quot; &quot;Agriculture&quot; &quot;Examination&quot; &quot;Education&quot; [5] &quot;Catholic&quot; &quot;Infant.Mortality&quot; row.names(swiss) #name of the rows [1] &quot;Courtelary&quot; &quot;Delemont&quot; &quot;Franches-Mnt&quot; &quot;Moutier&quot; &quot;Neuveville&quot; [6] &quot;Porrentruy&quot; &quot;Broye&quot; &quot;Glane&quot; &quot;Gruyere&quot; &quot;Sarine&quot; [11] &quot;Veveyse&quot; &quot;Aigle&quot; &quot;Aubonne&quot; &quot;Avenches&quot; &quot;Cossonay&quot; [16] &quot;Echallens&quot; &quot;Grandson&quot; &quot;Lausanne&quot; &quot;La Vallee&quot; &quot;Lavaux&quot; [21] &quot;Morges&quot; &quot;Moudon&quot; &quot;Nyone&quot; &quot;Orbe&quot; &quot;Oron&quot; [26] &quot;Payerne&quot; &quot;Paysd&#39;enhaut&quot; &quot;Rolle&quot; &quot;Vevey&quot; &quot;Yverdon&quot; [31] &quot;Conthey&quot; &quot;Entremont&quot; &quot;Herens&quot; &quot;Martigwy&quot; &quot;Monthey&quot; [36] &quot;St Maurice&quot; &quot;Sierre&quot; &quot;Sion&quot; &quot;Boudry&quot; &quot;La Chauxdfnd&quot; [41] &quot;Le Locle&quot; &quot;Neuchatel&quot; &quot;Val de Ruz&quot; &quot;ValdeTravers&quot; &quot;V. De Geneve&quot; [46] &quot;Rive Droite&quot; &quot;Rive Gauche&quot; swiss$Fertility #returns the vector of data in the column Fertility [1] 80.2 83.1 92.5 85.8 76.9 76.1 83.8 92.4 82.4 82.9 87.1 64.1 66.9 68.9 61.7 [16] 68.3 71.7 55.7 54.3 65.1 65.5 65.0 56.6 57.4 72.5 74.2 72.0 60.5 58.3 65.4 [31] 75.5 69.3 77.3 70.5 79.4 65.0 92.2 79.3 70.4 65.7 72.7 64.4 77.6 67.6 35.0 [46] 44.7 42.8 Data frames are constructed using the function \\(\\mathtt{data.frame}\\). For example following creates a data frame of a character and numeric vector. num1 = seq(1:5) ch1 = c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;) df1 = data.frame(ch1, num1) df1 ch1 num1 1 A 1 2 B 2 3 C 3 4 D 4 5 E 5 3.2.5 Lists A list is like generic vector containing other objects. Lists can have numerous elements any type and structure they can also be of different lengths A list can contain another list and therefore it can be used to construct arbitrary data structures. A list can be constructed using the \\(\\mathtt{list}\\) function, for example e1 = c(2, 3, 5) #element-1 e2 = c(&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;dd&quot;, &quot;ee&quot;) #element-2 e3 = c(TRUE, FALSE, TRUE, FALSE, FALSE) #element-3 e4 = df1 #element-4 (previously constructed data frame) lst1 = list(e1, e2, e3, e4) # lst contains copies of e1,e2,e3,e4 str(lst1) #show the structure of lst1 List of 4 $ : num [1:3] 2 3 5 $ : chr [1:5] &quot;aa&quot; &quot;bb&quot; ... $ : logi [1:5] TRUE FALSE TRUE ... $ :&#39;data.frame&#39;: 5 obs. of 2 variables: ..$ ch1 : chr [1:5] &quot;A&quot; &quot;B&quot; ... ..$ num1: int [1:5] 1 2 3 4 5 Components are always numbered and may always be referred to as such. Figure 3.1: Lists Thus if lst1 is the name of a list with four components, these may be individually referred to as lst1[[1]], lst1[[2]], lst1[[3]] and lst1[[4]]. Note: When a single square bracket is used the component of a list is returned as a list while the double square bracket returns the component itself # first element of lst1 lst1[[1]] [1] 2 3 5 lst1[1] [[1]] [1] 2 3 5 The elements in a list can also be named using the function and these elements can be referred individually via there names. names(lst1) = c(&quot;e1&quot;, &quot;e2&quot;, &quot;e3&quot;, &quot;e4&quot;) names(lst1) #name of the elements [1] &quot;e1&quot; &quot;e2&quot; &quot;e3&quot; &quot;e4&quot; lst1$e1 #using $operator to refer the element [1] 2 3 5 This section provided an overview of various data types and data structures in R. The next section will discuss how to deal with external data souces with flat data. Function \\(\\mathtt{dim}\\) can also be used to define an array by assigning dimensions to a vector.↩︎ "],
["4-working-with-data.html", "Chapter 4 Working with Data", " Chapter 4 Working with Data Errors using inadequate data are much less than those using no data at all. -Charles Babbage "],
["4-1-data-importexport-in-r.html", "4.1 Data Import/Export in R", " 4.1 Data Import/Export in R "],
["5-graphs-examples.html", "Chapter 5 Graphs examples", " Chapter 5 Graphs examples Some example visualisation "],
["5-1-visualising-covid-19-using-maps.html", "5.1 Visualising COVID-19 using maps", " 5.1 Visualising COVID-19 using maps library(ggplot2) library(maps) library(ggthemes) library(plotly) d1=read.csv(&quot;https://raw.githubusercontent.com/RamiKrispin/coronavirus-csv/master/coronavirus_dataset.csv&quot;) d1=d1[d1$type==&quot;confirmed&quot;,] d2=aggregate(d1$cases,by=list(Lat=d1$Lat,Long=d1$Long,Country.Region=d1$Country.Region,Date=d1$date),FUN=sum) colnames(d2)[5]=&quot;cases&quot; world=map_data(&quot;world&quot;) w1=ggplot()+geom_polygon(data=world,aes(colour=region,x=long,y=lat,group=group),fill=&quot;white&quot;)+theme_map()+theme(legend.position = &quot;none&quot;)+scale_fill_brewer(palette = &quot;Blues&quot;) map &lt;- w1 + geom_point(aes(x = Long, y = Lat, size = cases,colour=Country.Region), data =d2, alpha = 1) + scale_size_continuous(range = c(2, 8)) + labs(title= &#39;COVID-19 Confirmed Cases&#39;) map #interactive version ggplotly(map) "],
["5-2-example-two.html", "5.2 Example two", " 5.2 Example two "],
["6-final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],
["references.html", "References", " References "]
]

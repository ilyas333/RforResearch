# Data Exploration
```{r, include=FALSE}
knitr::opts_chunk$set(comment = NA,tidy=TRUE,tidy.opts = list(keep.blank.lines=TRUE,width.cutoff=80),fig.env='figure',message=FALSE,warning=FALSE)
```

*The good news is that these descriptive statistics give us a manageable and meaningful summary of the underlying phenomenon. That’s what this chapter is about. The bad news is that any simplification invites abuse. Descriptive statistics can be like online dating profiles: technically accurate and yet pretty darn misleading.* -Charles Wheelan


## Data Preprocessing

-We will now discuss some methods for data manipulation to clean a dataset, combine various datasets or extract a variable from a data frame before we jump into some programming basics.

### Extracting Data 

-Data frames are the most used data structures in R as they offer more flexibility in the way they can handle data.

- Lets see some methods to extract data from a data frame. We will use the example dataset called $\mathtt{us\_stocks.csv}$. 

- Lets import it using $\mathtt{read.csv}$

```{r}
data_stocks=read.csv(file="data/us_stocks.csv",header=TRUE)
head(data_stocks)

```

- The function $\mathtt{names}$ or $\mathtt{colnames}$ are used to access the names of the columns (or variables) in the data set as shows below. 

- The function $\mathtt{row.names}$ can be used to access row names (if any) from a dataset 

```{r}
names(data_stocks)
colnames(data_stocks)
```

- A specific data variable can be accessed using its name or index (column number) in the data frame. 

- To select any column use $\mathtt{\$}$ symbol followed by the column name or its name in square brackets as shown in the example below

```{r}
msft_prices1=data_stocks$MSFT #the data is returned as a vector
head(msft_prices1)
msft_prices2=data_stocks[["MSFT"]]#the data is returned as a vector
head(msft_prices2)
#the following returns data as a data frame
msft_prices3=data_stocks["MSFT"]#can also be used to access multiple columns
head(msft_prices3)
```
- These data columns can also be accessed like a matrix, using a matrix index. 

- This method can return a complete row, a complete column or just an element from the dataset. 

```{r}
#MSFT is in the second column and leaving the row index 
#blank returns all the rows for the particular column

msft_prices4=data_stocks[,2]

head(msft_prices4)
#all the elements in row 4
data_stocks[4,]
```
### Combining Data Frames

- It may be required to combine two data frames during a data processing. 

- This can be done by stacking them row by row or combining them by columns using $\mathtt{rbind}$ and $\mathtt{cbind}$ respectively. 

- When using $\mathtt{cbind}$ the number of rows in the columns combined must be of equal length likewise in $\mathtt{rbind}$ the number of columns of the datasets combined should be equal. Lets see an example
```{r,error=TRUE}
#First create a vector having the returns for msft
msft_ret=100*diff(log(data_stocks$MSFT)) 
#combine the vector with the data 
data_stocks_r=cbind(data_stocks,MSFT_RET=msft_ret)#this will generate an error message 
```
```{r}
#different length 
length(msft_ret) 
length(data_stocks$MSFT)
#add one more value to vector msft_ret 
msft_ret=c(0,msft_ret)
#check the length 
length(msft_ret)
#lets combine now (it should work)
data_stocks_r=cbind(data_stocks,MSFT_RET=msft_ret)
head(data_stocks_r)#shows one more column added to the data
```

- The following example adds a row to the data frame.
```{r}
#create two dataframes from data_stocks
data_r1=data_stocks[1:10,]#first 10 rows
data_r2=data_stocks[2775:2784,]#last 10 rows
data_stocks_rbind=rbind(data_r1,data_r2)
print(data_stocks_rbind)
```
### Sub setting and Logical Data Selection

- Suppose we want to extract data with particular characteristics like values ranges etc. 

- This can be accomplished using logical statements in bracket notations. 

- The following example illustrates. See $\mathtt{help(">")}$ to see more comparison operators.

```{r}
#select all rows with Apple prices above 100
data_aaplgr100=data_stocks[data_stocks$AAPL>100,] 
head(data_aaplgr100)
min(data_aaplgr100$AAPL) #check if the prices are above 100
#this give NA as the minimum which indicates that data frame has NA 
#lets remove NAs from data_aaplgr100 using na.omit function
data_aaplgr100=na.omit(data_aaplgr100)
#now check the minimum again
min(data_aaplgr100$AAPL)
```
- The $\mathtt{na.omit}$ function used in the example above can be used to remove all the empty values in the dataset.

```{r}
head(data_stocks)#notice NAs in GOOG
data_stocks_googlena=data_stocks[!is.na(data_stocks$GOOG),]
head(data_stocks_googlena)#after removing NAs
#the above can still leave NAs in other columns
#use na.omit to remove all the blank data
data_stocks_naomit=na.omit(data_stocks)
```

- There can be a requirement in data pre processing where one might have to select data in a range. 

-  The following example selects data where MSFT prices lie between 20 and 30. 

- $\mathtt{\&}$ is a Logic operator in R see help(“&”) to see more details and other Logic operators.

```{r}
data_msft=data_stocks_naomit[data_stocks_naomit$MSFT<=30&data_stocks_naomit$MSFT>20,]
min(data_msft$MSFT)#check 

```
- These selections can also be performed using the function $\mathtt{subset}$. 

- The following example uses $\mathtt{subset}$ function to select rows with AAPL>100. The arguments to the function are also shows in the example

```{r}
args(subset.data.frame)
aaplgr100=subset(data_stocks_naomit,AAPL>100)
head(aaplgr100)
min(aaplgr100$AAPL)
```
## Data Transformation from Wide to Long (or vice versa)

- Sometimes its required to transform wide format data to long, which is often required to work with ggplot2 package (discussed in the graphics section)
- R package *tidyr* provides two functions `pivot_longer()` and `pivot_wider()` to transform the data into long or wide format.
- Let's convert the stocks data to the long format
```{r}
library(tidyr)

FinData_long=pivot_longer(data=data_stocks,cols=-Date,names_to="Stock",values_to="Price")
head(FinData_long)

```
- A reverse operation can be conducted using `pivot_wider()`
```{r}
FinData_wide=pivot_wider(FinData_long,names_from = Stock,values_from=Price)
head(FinData_wide)
```

## Summary Statistics

*The good news is that these descriptive statistics give us a manageable and meaningful summary of the underlying phenomenon. That’s what this chapter is about. The bad news is that any simplification invites abuse. Descriptive statistics can be like online dating profiles: technically accurate and yet pretty darn misleading.*-Charles Wheelan

- It is simple to calculate basic summary statistics in R, most of the functions are named according to what they do. 

- For instance $\mathtt{mean}$ calculates the mean of a single variable, $\mathtt{sd}$ calculates the standard deviation.


<div class='float-table'><div class="plain_layout" style='text-align: center;' id='magicparlabel-95'><span class='float-caption-Standard float-caption float-caption-standard'>Table:  Basic statistics functions in R</span></div>

<div class="plain_layout" style='text-align: center;' id='magicparlabel-100'><table><tbody><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-131'><b>Statistics</b></div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-134'><b>R-Function</b></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-137'>Arithmetic mean</div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-140'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo>
<mi>x</mi>
<mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
   </mrow>
  </mstyle>
 </mrow></math></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-143'>Geometric mean</div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-146'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo>
  <mrow><mi>m</mi><mi>e</mi><mi>a</mi><mi>n</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo>
  <mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo>
<mi>x</mi>
<mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
  </mrow>
<mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
  </mrow>
<mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
   </mrow>
  </mstyle>
 </mrow></math></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-149'>median</div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-152'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mi>m</mi><mi>e</mi><mi>d</mi><mi>i</mi><mi>a</mi><mi>n</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo>
<mi>x</mi>
<mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
   </mrow>
  </mstyle>
 </mrow></math></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-155'>Range</div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-158'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mi>r</mi><mi>a</mi><mi>n</mi><mi>g</mi><mi>e</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo>
<mi>x</mi>
<mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
   </mrow>
  </mstyle>
 </mrow></math></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-161'>variance</div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-164'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mi>v</mi><mi>a</mi><mi>r</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo>
<mi>x</mi>
<mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
   </mrow>
  </mstyle>
 </mrow></math></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-167'>standard deviation</div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-170'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mi>s</mi><mi>d</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo>
<mi>x</mi>
<mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
   </mrow>
  </mstyle>
 </mrow></math></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-173'>Interquantile Range</div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-176'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mi>I</mi><mi>Q</mi><mi>R</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo>
<mi>x</mi>
<mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
   </mrow>
  </mstyle>
 </mrow></math></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-179'>Other quantiles</div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-182'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mi>q</mi><mi>u</mi><mi>a</mi><mi>n</mi><mi>t</mi><mi>i</mi><mi>l</mi><mi>e</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo>
<mi>x</mi>
<mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
   </mrow>
  </mstyle>
 </mrow></math></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-185'>Skewness</div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-188'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mi>s</mi><mi>k</mi><mi>e</mi><mi>w</mi><mi>n</mi><mi>e</mi><mi>s</mi><mi>s</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo>
<mi>x</mi>
<mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
   </mrow>
  </mstyle>
 </mrow></math></div>
</td>
</tr><tr><td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-191'>Kurtosis</div>
</td>
<td align='center' valign='top'>
<div class="plain_layout" id='magicparlabel-194'><math xmlns="http://www.w3.org/1998/Math/MathML">
 <mrow>
  <mstyle mathvariant='monospace'>
   <mrow><mi>k</mi><mi>u</mi><mi>r</mi><mi>t</mi><mi>o</mi><mi>s</mi><mi>i</mi><mi>s</mi><mo form='prefix' fence='true' stretchy='true' symmetric='true'>(</mo>
<mi>x</mi>
<mo form='postfix' fence='true' stretchy='true' symmetric='true'>)</mo>
   </mrow>
  </mstyle>
 </mrow></math></div>
</td>
</tr></tbody>
</table>
</div>
</div>


- The following example demonstrates how to calculate the statistics measures in table-1 for Dow Jones prices in data file *data_fin.csv* 
```{r}
#change the working directory to the folder containing data_fin.csv or provide the full path with the filename 
data_stocks=read.csv("data/data_fin.csv")#import data
head(data_stocks)
DJI=data_stocks$DJI
DJI=na.omit(DJI) #remove NAs as it will affect the calculations
#Arithmetic mean
mean(DJI)
#Geometric mean
exp(mean(log(DJI)))
#median
median(DJI)
#variance & standard deviation
var(DJI)
sd(DJI)
#interquantile range and few quantiles
IQR(DJI)
quantile(DJI)
#skewness and kurtosis
#skewness and kurtosis functions are not available in R core library but in library e1071 (there are other packages which have functions for skewness and kurtosis try ??kurtosis or search for the function on RSearch.
library(e1071)
skewness(DJI)
kurtosis(DJI)

```
- The function $\mathtt{summary}$ in R provides some basic summary viz., minimum value, maximum value, median value and quartiles for one variable or a dataset. The function $\mathtt{summary}$ can be used as follows

```{r}
#summary of one column/variable in a dataframe
summary(DJI)
#summary of whole dataset excluding the time column
summary(data_stocks[,c(2:21)])

```

### Example-Descriptive Statistics of Stock Returns
- In this example we will use R to calculate descriptive statistics for the returns of 10 stocks in the data file $\mathtt{data\_fin.csv}$.

• We will first import the dataset into R using the $\mathtt{read.csv}$ function.
```{r}
data_cs1=read.csv("data/data_fin.csv")
head(data_cs1) #check the imported data
```

- Apply \mathtt{summary} function to \mathtt{data\_cs1.1} with dates as character and then after converting dates to Date class.

```{r}
#selecting first 10 price series including the data column
data_cs1.1=data_cs1[,c(1:11)]
#data cleaning-remove NAs
data_cs1.1=na.omit(data_cs1.1)
colnames(data_cs1.1)# see the columns present in the data
summary(data_cs1.1) #notice the Date variable
#check class of dates which will be factor ( treated as factor by default)	
class(data_cs1.1$Date)
#convert dates to class Date
data_cs1.1$Date=as.Date(data_cs1.1$Date,format="%d/%m/%Y")
class(data_cs1.1$Date)
summary(data_cs1.1)#notice the Date variable
```
- Convert prices to returns
```{r}

d2 = as.data.frame(sapply(data_cs1.1[2:11], function(x) diff(log(x)) * 100)) #note it will be one less
# create a different dataframe with returns
data_stocks_ret = as.data.frame(cbind(Date = data_cs1.1$Date[2:length(data_cs1.1$Date)], d2), stringsAsFactors = FALSE,
row.names = NULL)
# visual inspection
head(data_stocks_ret)
```
#### Using the $\mathtt{describe}$ function

- The package psych comes with a function called $\mathtt{describe}$ which generated the descriptive statistics for all the data vectors (columns) in a data frame, matrix or a vector. 

```{r}
library(psych)#load the required package
args(describe)#arguments for describe function
#use describe to calculate descriptive stats for data_cs1.1r
desc1=describe(data_stocks_ret[,2:11])#note we dont pass the date column
#check the output
head(desc1)
#the above output is in long format, we can transpose it get column format
desc1.t=t(desc1)
head(desc1.t)
```

- The descriptive statistics generated above gives mean, median, standard deviation, trimmed mean(trimmed), median, mad (median absolute deviation from the median), minimum (min), maximum (max), skewness (skew), kurtosis and standard error (se) . 

- This can easily be transferred to a CSV file or a text file. The following single line of code transfers the descriptive statistics to a CSV file which then can be imported into a word or latex file as required. 

- The pastecs package provides the function $\mathtt{stat.desc}$ which generated descriptive statistics for a data frame, matrix or a timeseries. Skewness and Kurtosis are not calculated by default in $\mathtt{stat.desc}$ but the argument $\mathtt{norm}$ can be set to TRUE to get these measures along with their standard errors. 

```{r}
require(pastecs)# note library and require can both be used to include a package
#detach the package pastecs its useful to avoid any conflicts (e.g psych and Hmisc have 'describe' function with two different behaviours
detach("package:psych",unload=TRUE)
#use stat.desc in with default arguments
desc2=stat.desc(data_stocks_ret[,2:11],norm=TRUE)
desc2#note skewness/kurtosis
```

